#!/usr/bin/env python
"""
Submits multiple jobs
"""

import os
import sys
import argparse
from buildlib import grab_structures
from buildlib import write_input_file

# Create ArgumentParser object to store user-desired parameters for submission
CMD_LINE_PARSER = argparse.ArgumentParser()

# positional arguments
CMD_LINE_PARSER.add_argument("structure_file",
  help="Enter the name of the file containing all the structures to have calculations run on")
CMD_LINE_PARSER.add_argument("template_file",
  help="Enter the name of the template file that will be used to build the jobs")

# additional parameters
CMD_LINE_PARSER.add_argument("-c", "--count", default=-1, type=int,
  help="amount of directories to build")
CMD_LINE_PARSER.add_argument("-a", "--augbasis", default=False, type=bool,
  help="use augmented basis sets")
CMD_LINE_PARSER.add_argument("-d", "--densityfit", default=False, type=bool,
  help="density fit the Hartree-Fock (if not already required")

# Place all parameters needed to create the submission script into a dictionary
BUILD_OPTIONS = vars(CMD_LINE_PARSER.parse_args())

# Get info to build job directories
NAMES, MULTS, COORDS = grab_structures(BUILD_OPTIONS['structure_file'])

# Get rid of parentheses in chemical names
NAMES_FIXED = [name.replace('(', 'p').replace(')', 'q') for name in NAMES]

# Create the job directories
for i, name in enumerate(NAMES_FIXED):

    if i+1 == BUILD_OPTIONS['count']:
        # Kill script
        sys.exit()
    else:
        # Create and go into the directory
        os.mkdir(str(i+1)+'_'+NAMES_FIXED[i])
        os.chdir(str(i+1)+'_'+NAMES_FIXED[i])

        # Call the writer function
        write_input_file(NAMES_FIXED[i], MULTS[i], COORDS[i],
                         BUILD_OPTIONS['template_file'],
                         BUILD_OPTIONS['augbasis'],
                         BUILD_OPTIONS['densityfit'])

        # Return to main directory with each job
        os.chdir('../')
