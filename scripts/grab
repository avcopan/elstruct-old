#!/usr/bin/env python
""" Grabs ENERGIES
"""

import os


def sortfxn(string):
    """ Sorts directory
    """

    return int(string.split('_')[0])


def read_energies():
    """ Reads electronic ENERGIES from output files.
    """

    # Initialize energy string
    energy_val = ''
    time_val = ''
    edz = ''
    etz = ''
    eqz = ''
    e5z = ''

    # Check if output.dat exists and read data if it exists
    if os.path.exists('./output.dat'):

        with open('output.dat', 'r') as jobfile:
            jobdata = jobfile.readlines()

        # Grab the CC ENERGIES while checking if job finished
        # Add the job wall time for completed jobs
        for i, data in enumerate(jobdata):
            if 'SETTING EDZ' in jobdata[i]:
                edz = jobdata[i].strip().split()[3] + ' '
            if 'EDZ              =' in jobdata[i]:
                edz = jobdata[i].strip().split()[2] + ' '
            if 'SETTING ETZ' in jobdata[i]:
                etz = jobdata[i].strip().split()[3] + ' '
            if 'ETZ              =' in jobdata[i]:
                etz = jobdata[i].strip().split()[2] + ' '
            if 'SETTING EQZ' in jobdata[i]:
                eqz = jobdata[i].strip().split()[3] + ' '
            if 'EQZ              =' in jobdata[i]:
                eqz = jobdata[i].strip().split()[2] + ' '
            if 'SETTING E5Z' in jobdata[i]:
                e5z = jobdata[i].strip().split()[3] + ' '
            if 'E5Z              =' in jobdata[i]:
                e5z = jobdata[i].strip().split()[2] + ' '
    
        for i in reversed(range(len(jobdata))):
            if 'REAL TIME' in jobdata[i]:
                time_val = time_val + '   ' + jobdata[i].strip().split()[3]
                break

    if os.path.exists('./5z/output.dat'):
        with open('./5z/output.dat', 'r') as fivezfile:
            fivezdata = fivezfile.readlines()
        for i in enumerate(fivezdata):
            if 'SETTING E5Z' in fivezdata[i]:
                e5z = fivezdata[i].strip().split()[3] + ' '

    # Add a line for seperation
    energy_val = '  ' + edz + etz + eqz + e5z + '\n'
    time_val = time_val + '\n'

    return energy_val, time_val


# Get the job directories in a list
DIRLIST = os.listdir('.')

if os.path.exists('./submission_scripts'):
    DIRLIST.remove('submission_scripts')

JOBDIRS = []
for x in DIRLIST:
    path = os.getcwd()+'/'+x
    if os.path.isdir(path):
        JOBDIRS.append(x)

# Sort the list
JOBDIRS.sort(key=sortfxn)

# Get empty list where everything stored
REF_ENERGIES = []
ENERGIES = []
TIMES = []

# Loop through directories and grab everything
COUNT = 13
HEADER_LIST = [96, 183, 234, 254, 265, 320, 340]
REF_LIST = ['H2', 'CH4', 'H2O', 'NH3']

for jobdir in JOBDIRS:

    # Increase COUNTer
    COUNT += 1

    if COUNT in HEADER_LIST:
        COUNT += 1
        ENERGIES.append('\n')
        TIMES.append('\n')

    # Print the directory
    print(jobdir)

    # get name
    name = jobdir.split('_')[1]

    # Blank the job
    energy_str = ''
    time_str = ''

    # Go into directory
    os.chdir(jobdir)

    # Check if a redo directory exists for rerunning a job that failed
    if os.path.exists('./retry'):
        os.chdir('retry')
        energy, time = read_energies()
        energy_str = str(COUNT) + '_' + jobdir + energy
        time_str = str(COUNT) + '_' + jobdir + time
        os.chdir('../')
        if name in REF_LIST:
            REF_ENERGIES.append(name + energy)
    else:
        energy, time = read_energies()
        energy_str = str(COUNT) + '_' + jobdir + energy
        time_str = str(COUNT) + '_' + jobdir + time
        if name in REF_LIST:
            REF_ENERGIES.append(name + energy)

    # Append to ENERGIES list
    ENERGIES.append(energy_str)
    TIMES.append(time_str)

    # Go back up a directory
    os.chdir('../')

# Write the ENERGIES and TIMES to files
with open('energies.dat', 'w') as energyfile:
    for line in REF_ENERGIES:
        energyfile.writelines(line)
    energyfile.writelines('\n')
    for line in ENERGIES:
        energyfile.writelines(line)
    with open('times.dat', 'w') as timefile:
        for line in TIMES:
            timefile.writelines(line)
