#!/usr/bin/env python
"""
Script to submit jobs to the Blues nodes independently
"""

import argparse
import elstruct


# TAKE JOB PARAMETERS FROM USER TO BUILD THE SUBMISSION SCRIPT 

# Create ArgumentParser object to store user-desired parameters for submission
CMD_LINE_PARSER = argparse.ArgumentParser("Submit electronic structure jobs to Blues Nodes"))

# Use positional arguments to specify the program to be ran as well as the compute nodes 
CMD_LINE_PARSER.add_argument(
        "program",
                             help=("Program to run" + 
                                   " (Supported: cfour2, gaussian09, molpro2015, molpro2015-mppx, orca4, psi4)"
                                  )
)                             
CMD_LINE_PARSER.add_argument("hostnodes",
                             help="Options: (1) Enter as list: node1,node2,node3...; (2) List nodes in a 'machines' file")

# Set additional parameters for user may want to control job submission 
CMD_LINE_PARSER.add_argument("-J", "--njobs", default=1, type=int,
  help="Run 'njobs' molpro2015 calcs on SINGLE node. Put jobs in calcn directory where 1<=n<=njobs. (default: %(default)d)")
CMD_LINE_PARSER.add_argument("-n", "--ncores_per_node", default=1, type=int,
  help="Number of cores for EACH node (default: %(default)d)")
CMD_LINE_PARSER.add_argument("-i", "--input",
  help="Name of input file (default: %(default)s)")
CMD_LINE_PARSER.add_argument("-o", "--output",
  help="Name of output file (default: %(default)s)")
CMD_LINE_PARSER.add_argument("-d", "--scratch", default="/scratch/$USER",
  help="Set the scratch directory (default: %(default)s)")
CMD_LINE_PARSER.add_argument("-s", "--submit", default='yes',
  help="Automatically submit job? yes/no (default: %(default)s)")
CMD_LINE_PARSER.add_argument("-b", "--background", default='yes',
  help="Run job in the background? yes/no (default: %(default)s)")

# Place all of the parameters needed to create the submission script into a dictionary
SUBMIT_OPTIONS = vars(cmd_line_parser.parse_args())

elstruct.runner.blues.submit(
    program=SUBMIT_OPTIONS["program"],
    hostnodes=SUBMIT_OPTIONS["hostnodes"],
    njobs=SUBMIT_OPTIONS["njobs"],
    ncores_per_node=SUBMIT_OPTIONS["ncores_per_node"],
    input_name=SUBMIT_OPTIONS["input"],
    output_name=SUBMIT_OPTIONS["output"],
    scratch=SUBMIT_OPTIONS["scratch"],
    submit=SUBMIT_OPTIONS["submit"],
    background=SUBMIT_OPTIONS["background"]
)
