#!/usr/bin/env python

import argparse
import elstruct


##### TAKE IN JOB PARAMETERS FROM THE USER THAT WILL BE USED TO BUILD THE SUBMISSION SCRIPT #####

# Create an ArgumentParser object to store the user-desired parameters for job submission
cmd_line_parser = argparse.ArgumentParser()

# Use positional arguments to specify the program to be ran as well as the compute nodes 
cmd_line_parser.add_argument("program",
  help="Program to run (Supported: cfour2, gaussian09, molpro2015, molpro2015-mppx, mrcc2018, nwchem6, orca4, psi4)")
cmd_line_parser.add_argument("account",help="LCRC account charged for running on the Bebop queue")

# Set additional parameters for user may want to control job submission 
cmd_line_parser.add_argument("-p","--partition",default="bdwall",
  help="Bebop partition to submit to (default: %(default)s)")
cmd_line_parser.add_argument("-N","--nnodes"   ,default=1,type=int,
  help="Number of nodes (default: %(default)d)")
cmd_line_parser.add_argument("-J","--njobs",default=1,type=int,
  help="Run 'njobs' molpro2015 calcs on SINGLE node. Put jobs in calcn directory where 1<=n<=njobs. (default: %(default)d)")
cmd_line_parser.add_argument("-n","--ncores_per_node",default=1,type=int,
  help="Number of cores for EACH node (default: %(default)d)")
cmd_line_parser.add_argument("-t","--walltime",default="2:00:00",
  help="Max wall time in HH:MM:SS (default: %(default)s)")
cmd_line_parser.add_argument("-j","--jobname",default="run",
  help="Name of job on the Bebop queue (default: %(default)s)")
cmd_line_parser.add_argument("-i","--input",
  help="Name of input file (default: %(default)s)")
cmd_line_parser.add_argument("-o","--output",
  help="Name of output file (default: %(default)s)")
cmd_line_parser.add_argument("-d","--scratch",default="/scratch/$USER",
  help="Set the scratch directory (default: %(default)s)")
cmd_line_parser.add_argument("-s","--submit",default='yes',
  help="Automatically submit job? yes/no (default: %(default)s)")
cmd_line_parser.add_argument("-b","--background",default='yes',
  help="Run job in the background? yes/no (default: %(default)s)")

# Place all of the parameters needed to create the submission script into a dictionary
SUBMIT_OPTIONS = vars(cmd_line_parser.parse_args())

elstruct.runner.bebop.submit(
    program=SUBMIT_OPTIONS["program"],
    account=SUBMIT_OPTIONS["account"],
    partition=SUBMIT_OPTIONS["partition"],
    nnodes=SUBMIT_OPTIONS["nnodes"],
    njobs=SUBMIT_OPTIONS["njobs"],
    ncores_per_node=SUBMIT_OPTIONS["ncores_per_node"],
    walltime=SUBMIT_OPTIONS["walltime"],
    jobname=SUBMIT_OPTIONS["jobname"],
    input_name=SUBMIT_OPTIONS["input"],
    output_name=SUBMIT_OPTIONS["output"],
    scratch=SUBMIT_OPTIONS["scratch"],
    submit=SUBMIT_OPTIONS["submit"],
    background=SUBMIT_OPTIONS["background"]
)

